name: ci-test

on:
  push:
    branches: [main]
  pull_request:
    types: [opened, edited, synchronize, reopened]

env:
  POETRY_VERSION: 1.8.3

jobs:
  checks:
    strategy:
      fail-fast: false
      max-parallel: 4
      matrix:
        os: [ubuntu-22.04, windows-latest, macos-latest]
        python-version: ["3.9", "3.10", "3.11", "3.12"]
    runs-on: ${{ matrix.os }}
    steps:
      - uses: actions/checkout@v4.1.1
      - name: Set up Python ${{ matrix.python-version }}
        uses: actions/setup-python@v5.1.0
        with:
          python-version: ${{ matrix.python-version }}
      - name: Install Poetry
        uses: snok/install-poetry@v1
        with:
          version: ${{ env.POETRY_VERSION }}
          virtualenvs-create: true
          virtualenvs-in-project: true
      - name: Set Poetry path for Windows
        if: runner.os == 'Windows'
        run: echo "$env:USERPROFILE\.poetry\bin" | Out-File -FilePath $env:GITHUB_PATH -Encoding utf8 -Append
      - name: Install dependencies
        shell: bash
        run: |
          if [ "$RUNNER_OS" == "Windows" ]; then
            $env:USERPROFILE\.poetry\bin\poetry install
          else
            poetry install
          fi
      - name: Lint code
        shell: bash
        run: |
          if [ "$RUNNER_OS" == "Windows" ]; then
            $env:USERPROFILE\.poetry\bin\poetry run pre-commit run --all-files
          else
            poetry run pre-commit run --all-files
          fi
      - name: Test code
        shell: bash
        run: |
          if [ "$RUNNER_OS" == "Windows" ]; then
            $env:USERPROFILE\.poetry\bin\poetry run python -m pytest -v
          else
            poetry run python -m pytest -v
          fi
